@page "/resetpassword"
@inherits ResetPasswordBase

<h4>Reset Password</h4>

@if (_forgotPasswordModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
 
    <div class="card">
        <div class="card-body">
            <p></p>
            <EditForm Model="@_forgotPasswordModel" OnValidSubmit="@ResetPasswordAsync">
                <DataAnnotationsValidator />
                @*<ValidationSummary />*@
                <div class="field">
                    <label class="label">Email</label>
                    <div class="control">
                        @*<InputText id="email" class="input" type="email" @bind-Value="@_forgotPasswordModel.Email"></InputText>*@

                        <InputText id="email" class="form-control" @bind-Value="@_forgotPasswordModel.Email" aria-describedby="emailHelp" direction="rtl" />
                        <ValidationMessage For="@(() => _forgotPasswordModel.Email)" />
                        <small id="emailHelp" class="form-text text-muted">To this Email will be sent New Password</small>
                    </div>
                </div>
                <p />
                <button type="submit" class="btn btn-outline-danger">Reset Password</button>
                @if (this._forgotPasswordResult != null)
                {
                    @if (this._forgotPasswordResult.Successful == SuccessfulEnum.Successful)
                    {

                    }

                    @if (this._forgotPasswordResult.Successful == SuccessfulEnum.NotSuccessful)
                    {
                        <div class="alert alert-danger" role="alert">
                            <p>@this._forgotPasswordResult.Error</p>
                        </div>
                    }
                }
            </EditForm>
        </div>
    </div>


}
@*@code{


        ChangePasswordCommand _changePasswordModel = new ChangePasswordCommand();

        async Task ChangePasswordExcute()
        {

            await Http.Create("/api/account/changePassword")
                .OnBadRequest<Dictionary<string, List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
                .OnOK(() =>
                {
                    messageService.Info("Password changed successfully");
                    command = new ChangePasswordCommand();
                })
                .Post(command);
            StateHasChanged();
        }
    }*@
