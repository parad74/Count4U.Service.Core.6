<!--@inherits LayoutComponentBase
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

@if (CurrentLang == "he")
{
    <link href="css/site-rtl.css" rel="stylesheet">
}
else
{
    <link href="css/site.css" rel="stylesheet" />
}

<div class="page">
    <div class="sidebar">
        <NavMenu LocalizationResources="@LocalizationResources" />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <LoginDisplay LocalizationResources="@LocalizationResources" />-->

            @*<a href="About">@LocalizationResources.Menu_About</a>*@
            @*<a href="Contact">@LocalizationResources.Menu_Contact</a>*@

            @*<a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>*@
        <!--</div>

        <div class="content px-4">

            @Body
            <div class="footer">
                <div class="form-row align-items-center text-muted px-4">
                    <div class="col"></div>
                    <div class="col-auto">
                        <span class="oi oi-globe" aria-hidden="true"></span>
                    </div>
                    <div class="col-auto">
                        <select class="form-control form-control-sm" @onchange="OnChangeCurrentLang">
                            <option value="en" selected="@(CurrentLang == "en")">English</option>
                            <option value="he" selected="@(CurrentLang == "he")">עברית</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>-->


        @*<p>
                Current state:
                <strong id="connected-state">
                    @(ComponentContext.IsConnected ? "connected" : "not connected")
                </strong>
            </p>*@


    <!--</div>
</div>

    @code {

        string CurrentLang;

        public GetResources LocalizationResources = new GetResources();

        protected override async Task OnInitializedAsync()
        {
            var lang = await I18nText.GetCurrentLanguageAsync();
            if (new[] { "en", "he" }.Contains(lang.Split('-')[0]))
            {
                CurrentLang = lang;
            }
            else
            {
                CurrentLang = "en";
            }

            LocalizationResources = await I18nText.GetTextTableAsync<GetResources>(this);

        }

        async Task OnChangeCurrentLang(ChangeEventArgs args)
        {
            Console.WriteLine($"OnChange: {args.Value}");
            CurrentLang = args.Value as string;
            await I18nText.SetCurrentLanguageAsync(CurrentLang);
        }

        async Task OnActionSelect(ChangeEventArgs args)
        {
            Console.WriteLine($"OnAction: {args.Value}");
            string actonKey = args.Value as string;

        }

    }-->
