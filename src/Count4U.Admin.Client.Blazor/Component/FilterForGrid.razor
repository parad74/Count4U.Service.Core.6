@if (FilterModel == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="row">
        <div class="col-3"> </div>
        <div class="d-flex flex-row-reverse">
            <div class="input-group mb-3  float-right">
                <div class="input-group-prepend">
                    &nbsp;  &nbsp;
                    @if (IsSearching)
                    {
                        <button class="btn btn-outline-dark btn-sm searchicon disabled" disabled><i class="fa fa-eraser fa-lg"></i></button>
                    }
                    else
                    {
                        <button @onclick="ClearFilterAsync" class="btn btn-outline-dark btn-sm searchicon" data-toggle="tooltip" data-placement="bottom" title="Clear Customer Filter"><i class="fa fa-eraser fa-lg"></i></button>
                    }
                </div>
                <input id="filterinput" placeholder="filter is empty" @bind="FilterModel.FilterValue" />
                <div class="input-group-append">
                    @if (IsSearching)
                    {
                    <button class="btn btn-success btn-sm  search disabled" disabled><span class="fa fa-spinner fa-spin fa-lg fa-fw"></span>@WaitingTitle</button>
                    }
                    else
                    {
                <button @onclick="SearchFilterAsync" class="btn btn-success btn-sm search" data-toggle="tooltip" data-placement="bottom" title="Set Customer Filter"><i class="fa fa-filter fa-lg fa_custom_white"></i>&nbsp; &nbsp; &nbsp;&nbsp;@FilterTitle &nbsp; &nbsp;&nbsp;&nbsp;</button>

                    }
                    &nbsp;  &nbsp;
                </div>
                <div class="input-group-append">
                    <select class="form-control form-control-sm select_border_color" id="select-customer-param"
                            @bind="@FilterModel.FilterSelectByField">
                        @foreach (var sparam in FilterModel.FilterSelectParamDictionary)
                        {
                            <option value=@sparam.Key>@sparam.Value</option>
                        }
                    </select>
                </div>
            </div>
        </div>

        @*<div class="col-2"></div>*@
    </div>
}

@code
    {
    [Parameter]
    public FilterModel FilterModel { get; set; }

    [Parameter]
    public bool IsSearching  { get; set; }

    [Parameter]
    public string WaitingTitle { get; set; }

    [Parameter]
    public string FilterTitle { get; set; }

    [Parameter]
    public EventCallback OnClearClick { get; set; }

    [Parameter]
    public EventCallback OnSearchClick { get; set; }


    public Task ClearFilterAsync()
    {
        Console.WriteLine($"OnClearClick");
        return OnClearClick.InvokeAsync();
    }

    public Task SearchFilterAsync()
    {
        Console.WriteLine($"OnSearchClick");
        return OnSearchClick.InvokeAsync();
    }
}