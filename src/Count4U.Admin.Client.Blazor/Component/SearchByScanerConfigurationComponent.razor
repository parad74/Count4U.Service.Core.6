@using Monitor.Service.Shared;
<style type="text/css">
    .fa_custom {
        color: #0b960f;
        font-size: 16px;
        font-weight: 500;
        line-height: 20px;
        letter-spacing: 0.15px;
    }

    .fa_custom_background {
        background-color: #bfd0c0
    }


    .fa_custom_white {
        color: #ffffff
    }

    .custom_table {
        width: 100%;
        table-layout: fixed;
        overflow-wrap: break-word;
    }

    .select_border_color {
        /*          border: 1px solid #0b960f;*/
        border-radius: .1rem;
    }

    .upbutton {
        background: transparent;
        border: none;
        font-size: 14px;
        font-weight: 500;
        line-height: 20px;
        letter-spacing: 0.15px;
        color: #727375;
        /*        margin-bottom: 6px;
        margin-top: 6px;*/
    }
</style>

<div class="form-group" style="margin-left: -15px;">
    <div class="medium-label pb-3">Search configuration</div>
    <div class="medium-label pb-3">SEARCH BY SCANNER</div>

    <div class="row">
        <div class="col">
            <div class="medium-label py-3">Add new inventory item</div>
            <label class="switch">
                <InputCheckbox class="checkbox" disabled="@_isSubmit" @bind-Value="_profileDomainObject.Search.SearchByScannerScreenConfiguration.AddNewInventoryEnabled" id="addnewinventory" />
                <span class="slider round"></span>
            </label>
            @if (_profileDomainObject.Search.SearchByScannerScreenConfiguration.AddNewInventoryEnabled)
            {
                <span class="p-2">Enabled</span>
            }
            else
            {
                <span class="p-2">Disabled</span>
            }


        </div>
        <div class="col">
            <div class="medium-label py-3">Camera barcode scanner</div>
            <label class="switch">
                <InputCheckbox class="checkbox" disabled="@_isSubmit" @bind-Value="_profileDomainObject.Search.SearchByScannerScreenConfiguration.CameraBarcodeScannerEnabled" id="create" />
                <span class="slider round"></span>
            </label>

            @if (_profileDomainObject.Search.SearchByScannerScreenConfiguration.CameraBarcodeScannerEnabled)
            {
                <span class="p-2">Enabled</span>
            }
            else
            {
                <span class="p-2">Disabled</span>
            }
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div class="medium-label py-3">Navigate Back</div>
            <label class="switch">
                <InputCheckbox class="checkbox" disabled="@_isSubmit" @bind-Value="_profileDomainObject.Search.SearchByScannerScreenConfiguration.NavigateBackEnabled" id="signature" />
                <span class="slider round"></span>
            </label>
            @if (_profileDomainObject.Search.SearchByScannerScreenConfiguration.NavigateBackEnabled)
            {
                <span class="p-2">Enabled</span>
            }
            else
            {
                <span class="p-2">Disabled</span>
            }


        </div>

    </div>
    <div class="line-border row"></div>
 
    <div class="medium-label py-3">Perform search by next properties</div>
    <div class="grid-container">
        <Dropzone class="custom_table" Context="itemProperty" Accepts="(d, t) => d.index != 0"
                  Items="_profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty"
                  InstantReplace="true" TItem="SearchByProperty"
                  OnItemDrop="@((p)=>OnSearchByPropertyDrop(p))" OnReplacedItemDrop="@((p)=>OnReplacedSearchByPropertyDrop(p))">
            <div>
                <div class="col px-0" style="width: 220px">
                    <div class="d-flex flex-row-reverse">
                        <div class="col-1" style="background-color: white;">
                            <button type="button" class="btn"
                                    @onclick="@(() => DeleteSearchByPropertieItem(itemProperty))">
                                <i class="fa fa-times text-md-left text-secondary"></i>
                            </button>
                        </div>
                        <div style="width: 220px">
                            <select class="form-control form-control-sm select_border_color" disabled="@_isSubmit"
                                    @bind="@itemProperty.id">
                                @foreach (var url in _fieldList2)
                                {
                                    <option value=@url.Key>@url.Value</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            </div>

        </Dropzone>
    </div>

    <div class="grid-container">
        <div class="col px-0" style="width: 220px">
            <div class="d-flex flex-row-reverse">
                <div class="col-1" style="background-color: white;">
                    <button type="button" class="btn"
                            @onclick="@(() => AddNewSearchByPropertieItem())">
                        <i class="fa fa-plus-square text-md-left text-success"></i>
                    </button>
                </div>
                <div style="width: 220px">
                </div>
            </div>
        </div>
    </div>

    <div class="line-border row"></div>

        <div class="medium-label pb-3"> Display properties</div>
        <div class="grid-container">
            <Dropzone class="custom_table" Context="itemDisplayProperty" Accepts="(d, t) => d.index != 0"
                      Items="_profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty"
                      InstantReplace="true" TItem="SearchDisplayProperty"
                      OnItemDrop="@((p)=>OnSearchDisplayPropertyDrop(p))" OnReplacedItemDrop="@((p)=>OnReplacedSearchDisplayPropertyDrop(p))">
                <div>
                    <div class="row mx-0" style="background-color: #bfd0c0;">
                        <div class="col text-white" style="padding-left: 20px;padding-top: 10px;"> #&nbsp;@itemDisplayProperty.index&nbsp;@itemDisplayProperty.id</div>
                        <div class="col pr-0">
                            <div class="d-flex flex-row-reverse">
                                <div class="col-1" style="background-color: white;">
                                    <button type="button" class="btn"
                                            @onclick="@(() => DeleteDisplayPropertyItem(itemDisplayProperty))">
                                        <i class="fa fa-times text-md-left text-secondary"></i>
                                    </button>
                                </div>
                                @if (itemDisplayProperty.IsOpen == true)
                                {
                                    <button type="button" class="btn" style="background-color: transparent;"
                                            @onclick="@itemDisplayProperty.ToggleButton">
                                        <i class="fa fa-plus fa-right text-white"></i>
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn" style="background-color: transparent"
                                            @onclick="@itemDisplayProperty.ToggleButton">
                                        <i class="fa fa-minus fa-right text-white"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>


                    <div class="m-1" style='display: @(itemDisplayProperty.IsOpen ? "none" : "block");'>
                        <SearchByScanerConfigurationComponentItem _item="@itemDisplayProperty"
                                                                  _fieldList2="@_fieldList2" _itemType="@_itemType">
                        </SearchByScanerConfigurationComponentItem>
                    </div>
                </div>
            </Dropzone>
        </div>
        <div class="grid-container">
            <div class="row mx-0">
                <div class="col text-success" style="padding-left: 20px;padding-top: 10px;"> #</div>
                <div class="col pr-0">
                    <div class="d-flex flex-row-reverse">
                        <div class="col-1">
                            <button type="button" class="btn"
                                    @onclick="@(() => AddNewDisplayPropertyItem())">
                                <i class="fa fa-plus-square text-md-left text-success"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>
            @code
{
                [Parameter]
                public bool _isSubmit { get; set; }

                [Parameter]
                public Count4U.Service.Format.Profile _profileDomainObject { get; set; }

                [Parameter]
                public List<ValueItem> _fieldList2 { get; set; }

                [Parameter]
                public List<ValueItem> _itemType { get; set; }

                [Parameter]
                public bool _showItemsPerPage { get; set; } = false;

                private SearchByProperty DropedSearchByPropertyItem = null;
                private SearchByProperty ReplacedSearchByPropertyItem = null;

                public void OnSearchByPropertyDrop(SearchByProperty item)
                {
                    DropedSearchByPropertyItem = item;
                    SearchReIndex();
                    StateHasChanged();

                }
                public void OnReplacedSearchByPropertyDrop(SearchByProperty item)
                {
                    ReplacedSearchByPropertyItem = item;
                    SearchReIndex();
                    StateHasChanged();
                }

                public void SearchReIndex()
                {
                    Console.WriteLine($"Client.ReIndex");
                    int i = 1;

                    foreach (var item in this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty)
                    {
                        item.index = i;
                        i++;
                    }
                }


                public async Task DeleteSearchByPropertieItem(SearchByProperty item)
                {
                    _profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty.Remove(item);
                }

                public async Task AddNewSearchByPropertieItem()
                {
                    // _profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty
                    Console.WriteLine($"Client.AddNewSearchByPropertieItem");
                    SearchByProperty newItem = new SearchByProperty();
                    this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty =
                      this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty.Where(x => x.index > 0).OrderBy(x => x.index).ToList();

                    var sort = this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty.OrderByDescending(x => x.index).ToList();
                    int newIndex = 9999;
                    if (sort.Count > 1)
                    {
                        newIndex = sort.FirstOrDefault().index + 1;
                    }
                    else
                    {
                        newIndex = 1;
                    }
                    newItem.index = newIndex;
                    this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByProperties.SearchByProperty.Add(newItem);

                    // this._profileDomainObject.InventoryListDefaultUIConfiguration.InventoryItemsProperties.InventoryItemDisplayProperty.Add(new InventoryItemDisplayProperty());

                    StateHasChanged();
                    // _profileDomainObject.InventoryListDefaultUIConfiguration.InventoryItemsProperties.InventoryItemDisplayProperty.Add(new InventoryItemDisplayProperty() { });
                }

                private SearchDisplayProperty DropedSearchDisplayPropertyItem = null;
                private SearchDisplayProperty ReplacedSearchDisplayPropertyItem = null;

                public void OnSearchDisplayPropertyDrop(SearchDisplayProperty item)
                {
                    DropedSearchDisplayPropertyItem = item;
                    DisplayReIndex();
                    StateHasChanged();

                }
                public void OnReplacedSearchDisplayPropertyDrop(SearchDisplayProperty item)
                {
                    ReplacedSearchDisplayPropertyItem = item;
                    DisplayReIndex();
                    StateHasChanged();
                }


                public void DisplayReIndex()
                {
                    Console.WriteLine($"Client.ReIndex");
                    int i = 1;

                    foreach (var item in this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty)
                    {
                        item.index = i;
                        i++;
                    }
                }

                public async Task DeleteDisplayPropertyItem(SearchDisplayProperty item)
                {
                    _profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty.Remove(item);
                }


                public async Task AddNewDisplayPropertyItem()
                {
                    // _profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty
                    Console.WriteLine($"Client.AddNewDisplayPropertyItem");
                    SearchDisplayProperty newItem = new SearchDisplayProperty();
                    this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty =
                      this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty.Where(x => x.index > 0).OrderBy(x => x.index).ToList();

                    var sort = this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty.OrderByDescending(x => x.index).ToList();
                    int newIndex = 9999;
                    if (sort.Count > 1)
                    {
                        newIndex = sort.FirstOrDefault().index + 1;
                    }
                    else
                    {
                        newIndex = 1;
                    }
                    newItem.index = newIndex;
                    this._profileDomainObject.Search.SearchByScannerScreenConfiguration.SearchByScannerResultListDisplayProperties.SearchDisplayProperty.Add(newItem);


                    StateHasChanged();
                }


                public void ReIndex()
                {
                    Console.WriteLine($"Client.ReIndex");
                    int i = 1;

                    foreach (var item in this._profileDomainObject.InventoryListDefaultUIConfiguration.InventoryItemsProperties.InventoryItemDisplayProperty)
                    {
                        item.index = i;
                        i++;
                    }
                }
            }
